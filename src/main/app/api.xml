<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <http:listener-config name="api-httpListenerConfig" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <apikit:config name="api-config" raml="api.raml" consoleEnabled="false" doc:name="Router"/>
    <ws:consumer-config name="Web_Service_Consumer" service="GlobalWeatherSoapService" port="GlobalWeatherSoapPort" serviceAddress="http://localhost:63081/weather" wsdlLocation="http://www.webservicex.com/globalweather.asmx?WSDL" doc:name="Web Service Consumer"/>
    <ws:consumer-config name="Web_Service_Consumer1" service="GlobalWeather" port="GlobalWeatherSoap12" serviceAddress="http://www.webservicex.com/globalweather.asmx" wsdlLocation="http://www.webservicex.com/globalweather.asmx?WSDL" doc:name="Web Service Consumer"/>
    <ws:consumer-config name="Web_Service_Consumer2" service="GlobalWeather" port="GlobalWeatherSoap12" serviceAddress="http://www.webservicex.com/globalweather.asmx" wsdlLocation="http://www.webservicex.com/globalweather.asmx?WSDL" doc:name="Web Service Consumer"/>
    <ws:consumer-config name="Web_Service_Consumer3" service="GlobalWeather" port="GlobalWeatherSoap12" serviceAddress="http://www.webservicex.com/globalweather.asmx" wsdlLocation="http://www.webservicex.com/globalweather.asmx?WSDL" doc:name="Web Service Consumer"/>
    <ws:consumer-config name="Web_Service_Consumer4" service="GlobalWeather" port="GlobalWeatherSoap12" serviceAddress="http://www.webservicex.com/globalweather.asmx" wsdlLocation="http://www.webservicex.com/globalweather.asmx?WSDL" doc:name="Web Service Consumer"/>
    <ws:consumer-config name="Web_Service_Consumer5" service="GlobalWeather" port="GlobalWeatherSoap12" serviceAddress="http://DESKTOP-0S92JHR:8088/mockGlobalWeatherSoap12" wsdlLocation="http://localhost:63081/weather?wsdl" doc:name="Web Service Consumer"/>
    <ws:consumer-config name="Web_Service_Consumer6" service="GlobalWeatherSoapService" port="GlobalWeatherSoapPort" serviceAddress="http://localhost:63081/weather" wsdlLocation="http://desktop-0s92jhr:8088/mockGlobalWeatherSoap12?wsdl" doc:name="Web Service Consumer"/>
    <ws:consumer-config name="Web_Service_Consumer7" service="GlobalWeatherSoapService" port="GlobalWeatherSoapPort" serviceAddress="http://localhost:63081/weather" wsdlLocation="http://localhost:63081/weather?wsdl" doc:name="Web Service Consumer"/>
    <ws:consumer-config name="Web_Service_Consumer8" service="GlobalWeather" port="GlobalWeatherSoap12" serviceAddress="http://www.webservicex.com/globalweather.asmx" wsdlLocation="http://localhost:63081/weather?wsdl" doc:name="Web Service Consumer"/>
    <ws:consumer-config name="Web_Service_Consumer9" service="GlobalWeather" port="GlobalWeatherSoap12" serviceAddress="http://www.webservicex.com/globalweather.asmx" wsdlLocation="http://www.webservicex.com/globalweather.asmx?WSDL" doc:name="Web Service Consumer"/>
    <flow name="api-main">
        <http:listener config-ref="api-httpListenerConfig" path="/api/*" doc:name="HTTP"/>
        <apikit:router config-ref="api-config" doc:name="APIkit Router"/>
        <exception-strategy ref="api-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="api-console">
        <http:listener config-ref="api-httpListenerConfig" path="/console/*" doc:name="HTTP"/>
        <apikit:console config-ref="api-config" doc:name="APIkit Console"/>
    </flow>
    <flow name="get:/countries/{countryName}/Cities:api-config">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.webserviceX.NET
---
{
	ns0#GetCitiesByCountry: {
		ns0#CountryName: flowVars.countryName
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <ws:consumer config-ref="Web_Service_Consumer3" operation="GetCitiesByCountry" doc:name="Web Service Consumer"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://www.webserviceX.NET
%var toItem = (item) -> {name: item, description: item ++ "- a great city to be."}
---

{
	cities: read(payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult, "application/xml").NewDataSet.*Table..City distinctBy $ map
		"city" : toItem($)
}
when payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "" 
or payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "Data Not Found"
otherwise
{
}
]]></dw:set-payload>
            <dw:set-variable variableName="responseMap"><![CDATA[%dw 1.0
%namespace ns0 http://www.webserviceX.NET
%output application/java
---
{
	"notFound": true
}
when payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "" 
or payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "Data Not Found"
otherwise
{
	"notFound": true
}]]></dw:set-variable>
        </dw:transform-message>
        <logger message="#[responseMap['notFound']]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[responseMap['notFound']]">
                <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
            </when>
            <otherwise>
                <set-payload value="#[payload]" doc:name="Set Payload"/>
            </otherwise>
        </choice>

    </flow>
    <flow name="get:/countries:api-config">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.webserviceX.NET
---
{
	ns0#GetCitiesByCountry: {
		ns0#CountryName: null
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <ws:consumer config-ref="Web_Service_Consumer9" operation="GetCitiesByCountry" doc:name="Web Service Consumer"/>
        <dw:transform-message metadata:id="073d85a4-cd9c-414f-bd71-445a0221ed59" doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://www.webserviceX.NET
%var toItem = (item) -> {name: item, description: item ++ "- a great country to be."}
---
{
	countries : 
		read(payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult, "application/xml").NewDataSet.*Table..Country distinctBy $ map
		"country" : toItem($)
}

when payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "" 
or payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "Data Not Found"
otherwise
{
}
]]></dw:set-payload>
            <dw:set-variable variableName="responseMap"><![CDATA[%dw 1.0
%namespace ns0 http://www.webserviceX.NET
%output application/java
---
{
	"notFound": false
}
when payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "" 
or payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "Data Not Found"
otherwise
{
	"notFound": true
}]]></dw:set-variable>
        </dw:transform-message>
        <logger message="#[responseMap['notFound']]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[responseMap['notFound']]">
                <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
            </when>
            <otherwise>
                <set-payload value="#[payload]" doc:name="Set Payload"/>
            </otherwise>
        </choice>

    </flow>
    <flow name="get:/weather:api-config">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.webserviceX.NET
---
{
	ns0#GetWeather: {
		ns0#CityName: inboundProperties."http.query.params".city,
		ns0#CountryName: inboundProperties."http.query.params".country
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <ws:consumer config-ref="Web_Service_Consumer7" operation="GetWeather" doc:name="Web Service Consumer"/>

        <dw:transform-message metadata:id="c2e903a5-01d1-4cb0-b8af-fa937faa5721" doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%input payload application/xml
%output application/json
%namespace ns0 http://www.webserviceX.NET
---
{
	Location: read(payload.ns0#GetWeatherResponse.ns0#GetWeatherResult, "application/xml").CurrentWeather.Location,
	Time: read(payload.ns0#GetWeatherResponse.ns0#GetWeatherResult, "application/xml").CurrentWeather.Time,
	Wind: read(payload.ns0#GetWeatherResponse.ns0#GetWeatherResult, "application/xml").CurrentWeather.Wind,
	Visibility: read(payload.ns0#GetWeatherResponse.ns0#GetWeatherResult, "application/xml").CurrentWeather.Visibility,
	SkyConditions: read(payload.ns0#GetWeatherResponse.ns0#GetWeatherResult, "application/xml").CurrentWeather.SkyConditions,
	Temperature: read(payload.ns0#GetWeatherResponse.ns0#GetWeatherResult, "application/xml").CurrentWeather.Temperature,
	DewPoint: read(payload.ns0#GetWeatherResponse.ns0#GetWeatherResult, "application/xml").CurrentWeather.DewPoint,
	RelativeHumidity: read(payload.ns0#GetWeatherResponse.ns0#GetWeatherResult, "application/xml").CurrentWeather.RelativeHumidity,
	Pressure:  read(payload.ns0#GetWeatherResponse.ns0#GetWeatherResult, "application/xml").CurrentWeather.Pressure,
	PressureTendency: read(payload.ns0#GetWeatherResponse.ns0#GetWeatherResult, "application/xml").CurrentWeather.PressureTendency
}

]]></dw:set-payload>
            <dw:set-variable variableName="responseMap"><![CDATA[%dw 1.0
%input payload application/xml
%output application/java
%namespace ns0 http://www.webserviceX.NET
---
{
	"notFound" : true
	
}
when payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "" 
or payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "Data Not Found"
otherwise
{
	"test" : true
}]]></dw:set-variable>

        </dw:transform-message>
        <logger message="#[responseMap['notFound']]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[responseMap['notFound']]">
                <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
            </when>
            <otherwise>
                <set-payload value="#[payload]" doc:name="Set Payload"/>
            </otherwise>
        </choice>

    </flow>
    <flow name="get:/countries/{countryName}/Cities/{city}:api-config">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.webserviceX.NET
---
{
	ns0#GetCitiesByCountry: {
		ns0#CountryName: flowVars.countryName
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <ws:consumer config-ref="Web_Service_Consumer2" operation="GetCitiesByCountry" doc:name="Web Service Consumer"/>
        <dw:transform-message metadata:id="231617f2-ab6f-4fa2-8a1d-69a26749b551" doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://www.webserviceX.NET
%var toItem = (item) -> {name: item, description: item ++ "- a great city to be."}
---

(read(payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult, "application/xml").NewDataSet.*Table..City filter
		flowVars.city == $ map {
			"city" : toItem($)	
		})[0]
when payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "" 
or payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "Data Not Found"
otherwise
{
}
	]]></dw:set-payload>
            <dw:set-variable variableName="responseMap"><![CDATA[%dw 1.0
%namespace ns0 http://www.webserviceX.NET
%output application/java
---
{
	"notFound": false
}
when payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "" 
or payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "Data Not Found"
otherwise
{
	"notFound": true
}]]></dw:set-variable>
        </dw:transform-message>
        <logger level="INFO" doc:name="Logger" message="#[responseMap['notFound']]"/>
        <choice doc:name="Choice">
            <when expression="#[responseMap['notFound']]">
                <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
            </when>
            <otherwise>
                <set-payload value="#[payload]" doc:name="Set Payload"/>
            </otherwise>
        </choice>

    </flow>
    <flow name="get:/countries/{countryName}:api-config">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.webserviceX.NET
---
{
	ns0#GetCitiesByCountry: {
		ns0#CountryName: flowVars.countryName
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <ws:consumer config-ref="Web_Service_Consumer1" operation="GetCitiesByCountry" doc:name="Web Service Consumer"/>
        <dw:transform-message metadata:id="7abedd22-2db7-4ca5-9c72-8c4f81645e81" doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://www.webserviceX.NET
%var toItem = (item) -> {name: item, description: item ++ "- a great country to be."}
---

(read(payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult, "application/xml").NewDataSet.*Table..Country map 
{
	country : toItem($)
})[0]

when payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "" 
or payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "Data Not Found"
otherwise
{
}
]]></dw:set-payload>
            <dw:set-variable variableName="responseMap"><![CDATA[%dw 1.0
%namespace ns0 http://www.webserviceX.NET
%output application/java
---
{
	"notFound": false
}
when payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "" 
or payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult != "Data Not Found"
otherwise
{
	"notFound": true
}]]></dw:set-variable>
        </dw:transform-message>
        <logger message="#[responseMap['notFound']]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[responseMap['notFound']]">
                <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
            </when>
            <otherwise>
                <set-payload value="#[payload]" doc:name="Set Payload"/>
            </otherwise>
        </choice>

    </flow>
    
    
    <apikit:mapping-exception-strategy name="api-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
